Build a Full-Stack LMS Web App — "CodeGym" (MERN Stack)
Build a scalable, full-featured Learning Management System (LMS) named CodeGym using the MERN Stack (MongoDB, Express.js, React.js, Node.js) with JWT-based Auth, Judge0 integration, and role-based access (Admin & Student).

🧑‍🏫 ROLES & AUTHENTICATION
Initial Admin is manually seeded in MongoDB Atlas on DB setup.

Only the Main Admin can:

Create/Manage other Admins and Students

Role-based login:

/admin/login (Admin + Trainer)

/student/login (Student)

JWT Auth + bcrypt for password hashing.

🎓 STUDENT FEATURES
Access only content shared or assigned by an Admin (no public self-registration).

View & participate in:

Courses

Classes (video/docs)

Daily Tests (MCQ / Fill in the Blanks / Coding)

Assignments (grand exams)

Submit:

Test responses (auto-evaluated)

Assignment responses (optional file + text/code input)

View:

Test scores

Assignment results

Leaderboard rankings

Personal Profile (view/edit)

🛠️ ADMIN FEATURES
Admin Dashboard with left-side vertical navbar.

Can Create / Edit / Delete / Assign / Revoke:

Courses

Classes (upload video/docs)

Tests (daily tests linked to classes)

Assignments (grand exams with set time frames)

Students & Admins

All content updates reflect across the system (real-time changes via DB).

Can set visibility of items:

public (available to all students)

private (only to selected students)

Can revoke student access to:

Courses, Tests, Assignments

Their scores, results, and visibility

Dashboard includes:

Analytics (test/assignment-wise)

Result tracking & filtering

Leaderboard (per course/test)

Profile (editable)

🧪 TESTS & ASSIGNMENTS (Core Academic Features)
🧩 Test System (Daily Tests):
Linked directly to Classes

Appear in student navbar for quick access

3 question types:

MCQ (single correct answer)

Fill in the Blanks

Coding (Judge0 API editor)

Auto-evaluated with real-time score tracking

📝 Assignments (Grand Exams):
Time-limited

Scheduled and assigned manually

Same 3 question types:

MCQ

Fill in the Blanks

Coding (Judge0)

Optional file upload per question

Final score submission tracked and ranked

🧱 MongoDB Collections
users

json
Copy
Edit
{
  "_id": ObjectId,
  "name": "Full Name",
  "email": "admin@example.com",
  "password": "hashed_pw",
  "role": "admin" | "student"
}
courses / classes / tests / assignments

json
Copy
Edit
{
  "_id": ObjectId,
  "title": "Title",
  "description": "Optional",
  "type": "class" | "test" | "assignment",
  "courseId": ObjectId (if linked),
  "content": [video, doc, questions],
  "questionTypes": ["mcq", "fill", "code"],
  "visibility": "public" | "private",
  "assignedTo": [studentIds],
  "createdBy": adminId,
  "timeWindow": { startTime, endTime } (for assignments)
}
results

json
Copy
Edit
{
  "studentId": ObjectId,
  "testId": ObjectId,
  "answers": [...],
  "score": Number,
  "submittedAt": Date
}
🌐 UI DESIGN
Left-Side Vertical Navbar (role-based)

Admin: Dashboard, Users, Courses, Classes, Tests, Assignments, Leaderboard, Profile

Student: Dashboard, My Content, Daily Tests, Assignments, Leaderboard, Profile

Responsive UI (React + Tailwind CSS / Bootstrap)

Reusable components: Cards, Forms, Result Tables, Judge0 Code Editor

Clean mobile-friendly layout

🔧 STACK & DEPLOYMENT
Frontend: React.js (Vite preferred), Tailwind CSS or Bootstrap

Backend: Node.js + Express.js

DB: MongoDB Atlas

Compiler: Judge0 API (via Axios)

Deployment:

Frontend: Vercel / Netlify

Backend: Render / Railway

DB: MongoDB Atlas